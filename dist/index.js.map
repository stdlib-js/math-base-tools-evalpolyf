{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/factory.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number-float64-base-to-float32' );\n\n\n// MAIN //\n\n/**\n* Evaluates a polynomial using single-precision floating-point arithmetic.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @param {NumericArray} c - polynomial coefficients sorted in ascending degree\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n*\n* var v = evalpolyf( new Float32Array( [ 3.0, 2.0, 1.0 ] ), 10.0 ); // 3*10^0 + 2*10^1 + 1*10^2\n* // returns 123.0\n*/\nfunction evalpolyf( c, x ) {\n\tvar p;\n\tvar i;\n\n\ti = c.length;\n\tif ( i < 2 || x === 0.0 ) {\n\t\tif ( i === 0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn c[ 0 ];\n\t}\n\ti -= 1;\n\tp = float64ToFloat32( float64ToFloat32( c[ i ] * x ) + c[ i-1 ] );\n\ti -= 2;\n\twhile ( i >= 0 ) {\n\t\tp = float64ToFloat32( float64ToFloat32( p * x ) + c[ i ] );\n\t\ti -= 1;\n\t}\n\treturn p;\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpolyf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number-float64-base-to-float32' );\nvar Float32Array = require( '@stdlib/array-float32' );\nvar Fcn = require( '@stdlib/function-ctor' );\nvar evalpolyf = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Generates a function for evaluating a polynomial using single-precision floating-point arithmetic.\n*\n* ## Notes\n*\n* -   The compiled function uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @param {NumericArray} c - polynomial coefficients sorted in ascending degree\n* @returns {Function} function for evaluating a polynomial\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n*\n* var polyval = factory( new Float32Array( [ 3.0, 2.0, 1.0 ] ) );\n*\n* var v = polyval( 10.0 ); // => 3*10^0 + 2*10^1 + 1*10^2\n* // returns 123.0\n*\n* v = polyval( 5.0 ); // => 3*5^0 + 2*5^1 + 1*5^2\n* // returns 38.0\n*/\nfunction factory( c ) {\n\tvar f;\n\tvar n;\n\tvar m;\n\tvar i;\n\n\t// Explicitly copy in order to ensure single-precision:\n\tc = new Float32Array( c );\n\n\t// Avoid exceeding the maximum stack size on V8 :(. Note that the choice of `500` was empirically determined...\n\tif ( c.length > 500 ) {\n\t\treturn polyval;\n\t}\n\t// Code generation. Start with the function definition...\n\tf = 'return function evalpolyf(x){';\n\n\t// Create the function body...\n\tn = c.length;\n\n\t// If no coefficients, the function always returns 0...\n\tif ( n === 0 ) {\n\t\tf += 'return 0.0;';\n\t}\n\t// If only one coefficient, the function always returns that coefficient...\n\telse if ( n === 1 ) {\n\t\tf += 'return ' + c[ 0 ] + ';';\n\t}\n\t// If more than one coefficient, apply Horner's method...\n\telse {\n\t\t// If `x == 0`, return the first coefficient...\n\t\tf += 'if(x===0.0){return ' + c[ 0 ] + ';}';\n\n\t\t// Otherwise, evaluate the polynomial...\n\t\tf += 'return f64_to_f32(' + c[ 0 ];\n\t\tm = n - 1;\n\t\tfor ( i = 1; i < n; i++ ) {\n\t\t\tf += '+f64_to_f32(x*';\n\t\t\tif ( i < m ) {\n\t\t\t\tf += 'f64_to_f32(';\n\t\t\t}\n\t\t\tf += c[ i ];\n\t\t}\n\t\t// Close all the parentheses...\n\t\tfor ( i = 0; i < 2*m; i++ ) {\n\t\t\tf += ')';\n\t\t}\n\t\tf += ';';\n\t}\n\t// Close the function:\n\tf += '}';\n\n\t// Add a source directive for debugging:\n\tf += '//# sourceURL=evalpolyf.factory.js';\n\n\t// Create the function in the global scope:\n\treturn ( new Fcn( 'f64_to_f32', f ) )( float64ToFloat32 );\n\n\t/*\n\t*    function evalpolyf( x ) {\n\t*        if ( x === 0.0 ) {\n\t*            return c[ 0 ];\n\t*        }\n\t*        return f64_to_f32(c[0]+f64_to_f32(x*f64_to_f32(c[1]+f64_to_f32(x*f64_to_f32(c[2]+f64_to_f32(x*f64_to_f32(c[3]+...+f64_to_f32(x*f64_to_f32(c[n-2]+f64_to_f32(x*c[n-1]))))))))));\n\t*    }\n\t*/\n\n\t/**\n\t* Evaluates a polynomial.\n\t*\n\t* @private\n\t* @param {number} x - value at which to evaluate a polynomial\n\t* @returns {number} evaluated polynomial\n\t*/\n\tfunction polyval( x ) {\n\t\treturn evalpolyf( c, x );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate a polynomial using single-precision floating-point arithmetic.\n*\n* @module @stdlib/math-base-tools-evalpolyf\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var evalpolyf = require( '@stdlib/math-base-tools-evalpolyf' );\n*\n* var v = evalpolyf( new Float32Array( [ 3.0, 2.0, 1.0 ] ), 10.0 ); // 3*10^0 + 2*10^1 + 1*10^2\n* // returns 123.0\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var evalpolyf = require( '@stdlib/math-base-tools-evalpolyf' );\n*\n* var polyval = evalpolyf.factory( new Float32Array( [ 3.0, 2.0, 1.0 ] ) );\n*\n* var v = polyval( 10.0 ); // => 3*10^0 + 2*10^1 + 1*10^2\n* // returns 123.0\n*\n* v = polyval( 5.0 ); // => 3*5^0 + 2*5^1 + 1*5^2\n* // returns 38.0\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAmB,QAAS,wCAAyC,EAwBzE,SAASC,EAAWC,EAAGC,EAAI,CAC1B,IAAIC,EACAC,EAGJ,GADAA,EAAIH,EAAE,OACDG,EAAI,GAAKF,IAAM,EACnB,OAAKE,IAAM,EACH,EAEDH,EAAG,CAAE,EAKb,IAHAG,GAAK,EACLD,EAAIJ,EAAkBA,EAAkBE,EAAGG,CAAE,EAAIF,CAAE,EAAID,EAAGG,EAAE,CAAE,CAAE,EAChEA,GAAK,EACGA,GAAK,GACZD,EAAIJ,EAAkBA,EAAkBI,EAAID,CAAE,EAAID,EAAGG,CAAE,CAAE,EACzDA,GAAK,EAEN,OAAOD,CACR,CAKAL,EAAO,QAAUE,ICtEjB,IAAAK,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAmB,QAAS,wCAAyC,EACrEC,EAAe,QAAS,uBAAwB,EAChDC,EAAM,QAAS,uBAAwB,EACvCC,EAAY,IA4BhB,SAASC,EAASC,EAAI,CACrB,IAAIC,EACAC,EACAC,EACAC,EAMJ,GAHAJ,EAAI,IAAIJ,EAAcI,CAAE,EAGnBA,EAAE,OAAS,IACf,OAAOK,EASR,GANAJ,EAAI,gCAGJC,EAAIF,EAAE,OAGDE,IAAM,EACVD,GAAK,sBAGIC,IAAM,EACfD,GAAK,UAAYD,EAAG,CAAE,EAAI,QAGtB,CAOJ,IALAC,GAAK,sBAAwBD,EAAG,CAAE,EAAI,KAGtCC,GAAK,qBAAuBD,EAAG,CAAE,EACjCG,EAAID,EAAI,EACFE,EAAI,EAAGA,EAAIF,EAAGE,IACnBH,GAAK,iBACAG,EAAID,IACRF,GAAK,eAENA,GAAKD,EAAGI,CAAE,EAGX,IAAMA,EAAI,EAAGA,EAAI,EAAED,EAAGC,IACrBH,GAAK,IAENA,GAAK,GACN,CAEA,OAAAA,GAAK,IAGLA,GAAK,qCAGI,IAAIJ,EAAK,aAAcI,CAAE,EAAKN,CAAiB,EAkBxD,SAASU,EAASC,EAAI,CACrB,OAAOR,EAAWE,EAAGM,CAAE,CACxB,CACD,CAKAZ,EAAO,QAAUK,ICvFjB,IAAIQ,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAU,IAKdF,EAAaC,EAAM,UAAWC,CAAQ,EAKtC,OAAO,QAAUD",
  "names": ["require_main", "__commonJSMin", "exports", "module", "float64ToFloat32", "evalpolyf", "c", "x", "p", "i", "require_factory", "__commonJSMin", "exports", "module", "float64ToFloat32", "Float32Array", "Fcn", "evalpolyf", "factory", "c", "f", "n", "m", "i", "polyval", "x", "setReadOnly", "main", "factory"]
}
